<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1428409787387">{:repl-history {:ide [], :local [&quot;(merge (range) \&quot;A\&quot;)&quot; &quot;(merge (range 10) \&quot;A\&quot;)&quot; &quot;(+ 2 2\n   )&quot; &quot;(+ 2 2)&quot; &quot;(conj \&quot;A\&quot; (range))&quot; &quot;(conj (repeat \&quot;A\&quot;) (range 3))&quot; &quot;(* 2 1)&quot; &quot;(doc shuffle)&quot; &quot;(doc lazy-seq\n     \n     )&quot; &quot;warmup&quot; &quot;(create-template 1 2 3\n                 )&quot; &quot;(create-template 2 5 1)&quot; &quot;(defn create-template [a b c d e]\n  (let [warmup (generate warmup)\n        mobility (generate mobility)\n        strength (generate strength)\n        hanging (generate hanging)\n        locomotion (generate locomotion)]\n    (do\n      (println (take a warmup))\n      (println (take b mobility))\n      (println (take c strength))\n      (println (take d hanging))\n      (println (take e locomotion)))))&quot; &quot;(def hanging [:passive-hang :active-hang :side-to-side-swing\n              :arching-active-hang :front-stationary-swing\n              :one-arm-passive :one-arm-active :shawerma\n              :swing-grip-routine :figure-8])&quot; &quot;(create-template 1 1 1 1 1)&quot; &quot;(create-template 1 1 1 1 1 1)&quot; &quot;(create-template 1 1 1 1 1 0)&quot; &quot;(create-template 1 4 2 0 0 2)&quot; &quot;(create-template 3 3 3 3 3 3)&quot; &quot;(generate leg-strength)&quot; &quot;(take 1 (generate leg-strength\n                  ))&quot; &quot;(take 1 (generate leg-strength))&quot; &quot;(create-template 1 2 3)&quot; &quot;bas&quot; &quot;(take 1 bas)&quot; &quot;(defn create-template [a b c]\n  (let [warmup (take a (generate warmup))\n        mobility (take b (generate mobility))\n        strength (take c (generate strength))]\n    (do\n      (println warmup)\n      (println mobility)\n      (println strength))))&quot; &quot;(create-template 1 2 1)&quot; &quot;(shuffle bas)&quot; &quot;(take 3 (generate bas))&quot; &quot;(reduce + [1 2 3 4])&quot; &quot;(apply + [1 2 3 4])&quot; &quot;(create-template 1 1 1)&quot; &quot;(take 1 (shuffle warmup))&quot; &quot;(take 3 (shuffle mobility))&quot; &quot;(take 3 (shuffle bas))&quot; &quot;(take 2 (shuffle bas))&quot; &quot;(take 2 (shuffle sass))&quot; &quot;(defn create-template [n1 n2 n3]\n  (let [a (take n1 (shuffle warmup))\n        b (take n2 (shuffle mobility))\n        c (take n3 (shuffle auxiliry))\n        d (take n3 (shuffle bas))\n        e (take n3 (shuffle bas))]\n    (do\n      (println a)\n      (println b)\n      (println c)\n      (println d)\n      (println e))))&quot; &quot;(defn create-template [n1 n2 n3 n4 n5]\n  (let [a (take n1 (shuffle warmup))\n        b (take n2 (shuffle mobility))\n        c (take n3 (shuffle auxiliry))\n        d (take n4 (shuffle bas))\n        e (take n5 (shuffle bas))]\n    (do\n      (println a)\n      (println b)\n      (println c)\n      (println d)\n      (println e))))&quot; &quot;(defn create-template [n1 n2 n3 n4 n5]\n  (let [a (take n1 (shuffle warmup))\n        b (take n2 (shuffle mobility))\n        c (take n3 (shuffle auxiliry))\n        d (take n4 (shuffle bas))\n        e (take n5 (shuffle leg-strength))]\n    (do\n      (println a)\n      (println b)\n      (println c)\n      (println d)\n      (println e))))&quot; &quot;(def mobility [:squat-routine :shoulder-rom-stabilisation\n               :scapula-mobilisation :wrist-prep :ankle-prep\n               :movnat-routine :bridge-rotation\n               :locked-knees-deadlift])&quot; &quot;(let [n 1000\n      cs (repeatedly n chan)\n      begin (System/currentTimeMillis)]\n  (doseq [c cs] (go (&gt;! c \&quot;hi\&quot;)))\n  (dotimes [i n]\n    (let [[v c] (alts!! cs)]\n      (assert (= \&quot;hi\&quot; v))))\n  (println \&quot;Read\&quot; n \&quot;msgs in\&quot; (- (System/currentTimeMillis) begin) \&quot;ms\&quot;))&quot; &quot;(require '[clojure.core.async :as async :refer :all])&quot; &quot;(create-template 1 3 1 1 1)&quot; &quot;(defn create-template [n1 n2 n3]\n  (let [a (take n1 (shuffle warmup))\n        b (take n2 (shuffle mobility))\n        c (take n3 (shuffle strength-all))]\n    (do\n      (println a)\n      (println b)\n      (println c))))&quot; &quot;(create-template 1 3 3)&quot; &quot;(reduce conj [1 2 3 4])&quot; &quot;(reduce conj '(1 2 3 4))&quot; &quot;(reduce #(conj [] %) (range 10))&quot; &quot;(reduce #(conj [] %) '(1 2))&quot; &quot;(reduce #((conj [] %)) '(1 2))&quot; &quot;(reduce + '(1 2))&quot; &quot;(reduce #(+ %) '(1 2))&quot; &quot;(reduce #(+) '(1 2))&quot; &quot;(reduce (fn [_] +) '(1 2))&quot; &quot;(reduce (fn [r i] (conj r (inc i))) [] (range 10))&quot; &quot;(cond\n  (= \&quot;h\&quot; \&quot;s\&quot;) true\n  :else false)&quot; &quot;(cond\n  (= \&quot;h\&quot; \&quot;s\&quot;) true\n  :ee false)&quot; &quot;(cond\n  (= \&quot;h\&quot; \&quot;s\&quot;) true\n  :ee true)&quot; &quot;(cond\n  (= \&quot;h\&quot; \&quot;h\&quot;) true\n  :ee true)&quot; &quot;(defn index [req]\n  {:status 200\n   :headers {\&quot;Content-Type\&quot; \&quot;text/html\&quot;}\n   :body \&quot;Move!\&quot;})&quot; &quot;(defroutes app\n           (GET \&quot;/\&quot; [] index)\n           (resources \&quot;/\&quot;)\n           (not-found \&quot;Page not found.\&quot;))&quot; &quot;(ns movement.core\n  (:gen-class)\n  (:require [compojure.core :refer [defroutes ANY GET POST PUT DELETE]]\n            [compojure.route :refer [not-found resources]]\n            [ring.adapter.jetty :refer [run-jetty]]\n            [ring.middleware.reload :refer [wrap-reload]]\n            ))&quot; &quot;(println \&quot;Hello!\&quot;)&quot; &quot;(reduce + [1 1 1])&quot; &quot;(def warmup-all [:joint-mobility :jump-rope :running])&quot; &quot;(def mobility-all [:squat-routine :shoulder-rom-stabilisation\n                   :scapula-mobilisation :wrist-prep :ankle-prep\n                   :movnat-routine :bridge-rotation\n                   :locked-knees-deadlift])&quot; &quot;(def leg-strength [:basic-squat :back-squat :front-squat :overhead-squat\n                   :basic-lunge :back-lunge :front-lunge :overhead-lunge\n                   :deadlift :pistols :shrimp :behind-leg\n                   :jump-onto-box-standing :jump-onto-box-squatting\n                   :explosive-flipping :natural-leg-curl])&quot; &quot;(def auxiliry [:l-sit :v-up :sitting-leg-lift :swedish-leg-lift\n               :hanging-leg-lift :gatherings :archups])&quot; &quot;(def sass [:swedish-bar-hold-front :swedish-bar-hold-back\n           :back-lever :front-lever :side-lever :planche :handstand])&quot; &quot;(def bas [:push-up-basic :push-up-russian :push-up-wide\n          :push-up-diamond :push-up-hindu :push-up-lateral :push-up-bridge\n          :push-up-archer :push-up-one-arm :push-up-one-leg-one-arm\n          :dips-basic :dips-russian :dips-single-bar :dips-korean :dips-ring\n          :dips-ring-wide :dips-ring-archer\n          :handstand-push-up-head-wall :handstand-push-up-wall :handstand-push-up-free\n          :planche-push-up :pull-up-basic :pull-up-rings :pull-up-rings-wide\n          :pull-up-chest :pull-up-waist :pull-up-weighted :pull-up-scapula\n          :one-arm-pull-up-forearm :one-arm-pull-up-bicep :one-arm-ring-negative\n          :archer-pull-up :one-arm-pull-up-band :one-arm-pull-up-shoulder\n          :one-arm-pull-up :row-basic :row-wide :front-lever-row\n          :german-hang-pull :pull-over :front-lever-pull :back-lever-pull\n          :tick-tock :back-lever-negative :front-lever-negative\n          :muscle-up :false-grip-hang :false-grip-pull-up :muscle-up-negative\n          :muscle-up-l-sit :rope-climb])&quot; &quot;(def strength-all (concat leg-strength auxiliry sass bas))&quot; &quot;(defn create-template [n1 n2 n3]\n  (let [a (take n1 (shuffle warmup-all))\n        b (take n2 (shuffle mobility-all))\n        c (take n3 (shuffle strength-all))]\n    (do\n      (println a)\n      (println b)\n      (println c))))&quot; &quot;(create-template 1 3 1)&quot; &quot;(defn home-page []\n  [:div [:h2 \&quot;Welcome to movement\&quot;]\n   [:div [:a {:href \&quot;#/about\&quot;} \&quot;go to about page\&quot;]]])&quot; &quot;(name :k)&quot; &quot;(vals @(atom []))&quot; &quot;(vals @(atom [:p :s]))&quot; &quot;(count running)&quot; &quot;(def movnat-throwing [:chest-throw :rotational-throw :front-swing-throw :overhead-throw])&quot; &quot;(count movnat-throwing)&quot; &quot;(count (concat movnat mobility strength hanging equilibre))&quot; &quot;(count (concat movnat mobility strength hanging equilibre locomotion))&quot;], :remote []}}</component>
</project>